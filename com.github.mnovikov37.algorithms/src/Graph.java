import java.util.List;

/**
 * Интерфейс графа. Граф содержит вершины и рёбра и предоставляет некоторые операции над ними
 * @param <V> Тип вершины
 * @param <E> Тип ребра
 */
public interface Graph<V, E extends Measurable> {
    void addVertex(V vertex);
    void addEdge(V startVertex, V endVertex, E edge);
    int getSize();
    void display();

    /**
     * Оптимальный путь представляется в виде списка рёбер. Данное решение выбрано потому, что между двумя вершинами
     * может существовать несколько рёбер, имеющих разные характеристики. Потому возвращение списка вершин может
     * создать неоднозначность в трактовании результата.
     * @param startVertex Начальная вершина
     * @param endVertex Конечная вершина
     * @param metricIndex Номер параметра, на который требуется опираться при выборе оптимального пути. Используемый
     *                    в каждой конкретной реализации тип рёбер может иметь несколько количественных харакреристик,
     *                    возвращаемых согласно интерфейсу Measurable, и в одной и той же реализации графа в различных
     *                    случаях алгоритм выбора оптимального пути может стремиться к минимизации той или иной
     *                    характеристики. Пример: выбор пути проезда по мнимальному расстоянию либо по минимальной
     *                    суммарной стоимости платных участков пути.
     * @return
     */
    List<E> getBestWay(V startVertex, V endVertex, int metricIndex);
}
